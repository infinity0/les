#!/bin/sh
# Inhibit auto-suspend if audio is playing, without resetting the idle
# local status like `caffine` does, to allow the screensaver to run.
#
# Additionally, if the local device is not idle or if audio is playing,
# then run /etc/les/prevent-idle if it is executable. For example, to
# inhibit auto-standby on a TV, if it can't detect computer activity.
#
# Based on https://forums.linuxmint.com/viewtopic.php?t=274877 with
# modification from https://forums.linuxmint.com/viewtopic.php?t=401003
# which uses sox(1) to detect if there are any running audio sources.

set -e
checkinterval="${1:-28}" # 28 seconds plus 2 seconds to record audio

# Audiocaffeine - ALSA

# Works in Linux Mint 19 - Cinnamon, Linux Mint 19 - Mate, Ubuntu 18.04 - Gnome

# Script to temporarily set suspend timout for AC and battery to "Never"
# while audio is playing.  It then reverts the settings when audio is no longer detected.

# Determine if a valid desktop environment is running and exit if it doesn't.
    echo "Reported desktop environment: ""$XDG_CURRENT_DESKTOP"
if [ "$XDG_CURRENT_DESKTOP" = "X-Cinnamon" ]; then
    actimeoutid="org.cinnamon.settings-daemon.plugins.power sleep-inactive-ac-timeout"
    batttimeoutid="org.cinnamon.settings-daemon.plugins.power sleep-inactive-battery-timeout"
    disablevalue=0
elif [ "$XDG_CURRENT_DESKTOP" = "MATE" ]; then
    actimeoutid="org.mate.power-manager sleep-computer-ac"
    batttimeoutid="org.mate.power-manager sleep-computer-battery"
    disablevalue=0
elif [ "$XDG_CURRENT_DESKTOP" = "ubuntu:GNOME" ]; then
    actimeoutid="org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type"
    batttimeoutid="org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type"
    disablevalue="nothing"
else
    echo "No valid desktop environment is running"
    exit 1
fi

# Create .config directory to store settings if it doesn't exist.
if [ ! -d ~/.config ]; then
    echo ".config directory not found!"
    echo "Creating ~/.config"
    mkdir ~/.config
fi

# Create audiocaffeine directory to store settings if it doesn't exist.
if [ ! -d ~/.config/audiocaffeine ]; then
    echo "Configuration directory not found!"
    echo "Creating ~/.config/audiocaffeine"
    mkdir ~/.config/audiocaffeine
fi

# Restore previous value for AC suspend timeout if script
# was interrupted.
if [ -f ~/.config/audiocaffeine/acsuspend ]; then
    echo "Restoring previous AC suspend timeout."
    read acsuspendtime < ~/.config/audiocaffeine/acsuspend
    gsettings set $actimeoutid $acsuspendtime
    echo "Removing temporary file ~/.config/audiocaffeine/acsuspend"
    rm ~/.config/audiocaffeine/acsuspend
fi

# Restore previous value for battery suspend timeout if script
# was interrupted.
if [ -f ~/.config/audiocaffeine/battsuspend ]; then
    echo "Restoring previous battery suspend timeout."
    read battsuspendtime < ~/.config/audiocaffeine/battsuspend
    gsettings set $batttimeoutid $battsuspendtime
    echo "Removing temporary file ~/.config/audiocaffeine/battsuspend"
    rm ~/.config/audiocaffeine/battsuspend
fi

prevent_remote_idle() {
    echo "Resetting remote idle status."
    if [ -x /etc/les/prevent-idle ]; then
        /etc/les/prevent-idle || true
    fi
}

prevent_local_idle() {
    echo "Resetting local idle status."
    xdotool mousemove_relative --sync 1 1 && \
    xdotool mousemove_relative -- -1 -1 || true
}

# Start main loop to check if audio is playing

prevaudio=false
#https://stackoverflow.com/questions/21294283/when-did-hup-stop-getting-sent-and-what-can-i-do-about-it
opp=$(ps -o ppid= $$)
while [ $opp = $(ps -o ppid= $$) ]; do

    if ! sox -q -t alsa -d -n stats trim 0 2 2>&1 | grep -q "Max level *0.000000"; then
        echo "Audio detected."

        # If AC timeout was not previously saved, then save it.
        if [ ! -f ~/.config/audiocaffeine/acsuspend ]; then
            echo "Saving current AC suspend timeout."
            gsettings get $actimeoutid > ~/.config/audiocaffeine/acsuspend
        fi

        # If battery timeout was not previously saved, then save it.
        if [ ! -f ~/.config/audiocaffeine/battsuspend ]; then
            echo "Saving current battery suspend timeout."
            gsettings get $batttimeoutid > ~/.config/audiocaffeine/battsuspend
        fi

        # Set the suspend timouts to Never using gsettings.
        echo "Changing suspend timeouts."
        gsettings set $actimeoutid $disablevalue
        gsettings set $batttimeoutid $disablevalue

        prevent_remote_idle

        prevaudio=true
    else
        echo "No audio detected."

        # If we just went silent, then reset the local idle timer so
        # that we don't go into suspend immediately e.g. if we happened
        # to have been idle for (acsuspend - 1 second).
        #
        # We don't prevent_local_idle all the time, so the screensaver
        # can activate when we are playing audio.
        #
        # Doing prevent_local_idle here *does* delay the screensaver
        # once, but only on these corner cases. The screensaver and
        # the suspend function both use the same idle timer, so it's
        # impossible for us to completely prevent the latter but allow
        # the former in this script; this corner case imperfection is
        # the best we can achieve.
        if "$prevaudio"; then
            prevent_local_idle
        fi

        # Restore previous value for AC suspend timeout and delete the
        # temporary file storing it.
        if [ -f ~/.config/audiocaffeine/acsuspend ]; then
            echo "Restoring previous AC suspend timeout."
            read acsuspendtime < ~/.config/audiocaffeine/acsuspend
            gsettings set $actimeoutid $acsuspendtime
            echo "Removing temporary file ~/.config/audiocaffeine/acsuspend"
            rm ~/.config/audiocaffeine/acsuspend
        fi

        # Restore previous value for battery suspend timeout and delete the
        # temporary file storing it.
        if [ -f ~/.config/audiocaffeine/battsuspend ]; then
            echo "Restoring previous battery suspend timeout."
            read battsuspendtime < ~/.config/audiocaffeine/battsuspend
            gsettings set $batttimeoutid $battsuspendtime
            echo "Removing temporary file ~/.config/audiocaffeine/battsuspend"
            rm ~/.config/audiocaffeine/battsuspend
        fi

        # If the local device is not idle, then prevent remote devices
        # from becoming idle. We *don't* prevent the local device from
        # becoming idle if audio is not playing, for the screensaver.
        if [ "$(xprintidle)" -lt "$((checkinterval * 1000))" ]; then
            prevent_remote_idle
        fi

        prevaudio=false
    fi

    # Pause the script for 60 seconds before doing the loop again.
    sleep "$checkinterval"

done
